version: '3.8'

services:
  # RabbitMQ (Message Queue) - No changes needed
  rabbitmq:
    image: rabbitmq:3-management
    container_name: swiftlogistics-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - swiftlogistics-net

  # MongoDB (Database for Orchestrator and ROS) - ADDED
  mongo:
    image: mongo:latest
    container_name: swiftlogistics-mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - swiftlogistics-net

  # Orchestrator Service - ADDED
  orchestrator:
    container_name: orchestrator-service
    build:
      context: ../services/orchestrator
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - APPLICATION_NAME=orchestrator-service
      - SERVER_PORT=8080
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=guest
      - RABBITMQ_PASSWORD=guest
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_DATA_MONGODB_URI=mongodb://mongo:27017/swiftlogistics
    depends_on:
      - rabbitmq
      - mongo
    networks:
      - swiftlogistics-net

  # ROS Integration Service - ADDED
  ros-integration:
    container_name: ros-integration-service
    build:
      context: ../services/ros-integration
      dockerfile: Dockerfile
    ports:
      - "8003:8000"
    environment:
      - RABBITMQ_URI=amqp://guest:guest@rabbitmq:5672/
      - MONGO_URI=mongodb://mongo:27017/swiftlogistics
    depends_on:
      - rabbitmq
      - mongo
    networks:
      - swiftlogistics-net

networks:
  swiftlogistics-net:
    driver: bridge

volumes:
  # The postgres volume is no longer needed for this test
  # postgres_data:
  mongo_data: # ADDED